pragma solidity ^0.4.0;

contract vote_contract {

    struct Proposal {
        bytes32 name;   // name 
        uint voteCount; // number of accumulated votes
    }
    
    mapping(address => uint) public voters;
    
    Proposal [] public proposal;

   address owner;
  
  
    // MODIFIER EVENTS
    modifier canvote() {
        if(voters[msg.sender]==0) {
            revert();
            _;
        }
    }

    modifier isowner() {
        if(msg.sender != owner){
            revert();
            _;
        }
    }
  

    // CONSTRUCTEUR
    function vote_contract() public {
        owner = msg.sender;
    }
    
    
    // FUNCTIONS
    
    // Add_proposal isowner()
    function add_proposal(bytes32 new_proposal) public isowner() {
        proposal.push(Proposal({    name: new_proposal,
                                    voteCount: 0})
                                );
    }
    
    
    // Ad voters(address voter) isowner()
    function add_voters() public isowner() {
        voters[msg.sender]++;
    }


    function vote(bytes32 _proposal) canvote() public {
        voters[msg.sender]--;
        proposal[_proposal].voteCount += 1;
    }
    

    
    // KILL    
    function kill() public isowner() {
        delete owner;
        selfdestruct(msg.sender);
    }
}
